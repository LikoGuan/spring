<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:whx="http://whx4j8.github.io/people"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://whx4j8.github.io/people http://whx4j8.github.io/people.xsd"
       default-autowire="byType">


    <context:component-scan base-package="com.liko.spring" />

    <whx:people id="people" name="whx" age="22"></whx:people>

    <!--bean id="speaker" class="com.liko.spring.Speaker" autowire="byName"-->
    <!--bean id="speaker" class="com.liko.spring.Speaker" autowire="byType"-->
    <bean id="speaker" class="com.liko.spring.Speaker">
        <property name="name" value="liko"/>
        <property name="content" value="I love Spring"/>
    </bean>

    <bean id="address" class="com.liko.spring.Address">
        <property name="country" value="China"/>
        <property name="city" value="Hangzhou"/>
        <property name="street" value="Liuxia"/>
    </bean>

    <!--<bean id="talk" class="com.liko.spring.TalkService"/>-->

    <!--subclass of FactoryBean-->
    <bean id="carFactoryBean" class="com.liko.spring.CarFactoryBean">
    </bean>

    <!--static factory-->
    <bean id="bed1" class="com.liko.spring.BedStaticFactory" factory-method="createBed">
    </bean>

    <!--non-static factory-->
    <bean id="bedNonStaticFactory" class="com.liko.spring.BedNonStaticFactory">
    </bean>
    <bean id="bed2" factory-bean="bedNonStaticFactory" factory-method="createBed">
    </bean>

    <bean id="mobile001" class="com.liko.spring.Mobile" init-method="initMethod" destroy-method="destroyMethod">
        <property name="price" value="399"></property>
    </bean>
    <bean id="xBeanPostProcessor" class="com.liko.spring.XBeanPostProcessor"></bean>

    <bean id="eventPublisher" class="com.liko.spring.EventPublisher"></bean>


    <!--&lt;!&ndash; 早期的Spring AOP 使用方式&ndash;&gt;-->
    <!--<bean id="aServiceImpl" class="com.liko.spring.aop.AServiceImpl"/>-->
    <!--&lt;!&ndash; 定义通知 &ndash;&gt;-->
    <!--<bean id="myBeforeAdvice" class="com.liko.spring.aop.MyBeforeAdvice"/>-->
    <!--&lt;!&ndash;<bean id="myAfterReturningAdvice" class="com.liko.spring.aop.MyAfterReturningAdvice"/>&ndash;&gt;-->
    <!--&lt;!&ndash; 产生代理对象 &ndash;&gt;-->
    <!--<bean id="aServiceImplProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
        <!--<property name="target" ref="aServiceImpl"></property>-->
        <!--&lt;!&ndash;<property name="interceptorNames" value="myBeforeAdvice,myAfterReturningAdvice"></property>&ndash;&gt;-->
        <!--<property name="interceptorNames" value="myBeforeAdvice"></property>-->
        <!--<property name="proxyInterfaces" value="com.liko.spring.aop.AService"></property>-->
        <!--<property name="proxyTargetClass" value="true"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 纯pojo 切面，使用xml配置；也可以直接食用AspectJ注解，更方便&ndash;&gt;-->
    <!--<bean id="boy" class="com.liko.spring.aop.Boy"/>-->
    <!--<bean id="performHelper" class="com.liko.spring.aop.PerformHelper"/>-->
    <!--<aop:config>-->
        <!--<aop:pointcut expression="execution(* com.liko.spring.aop.Boy.sing(..))" id="pointcut"/>-->
        <!--<aop:aspect ref="performHelper">-->
            <!--<aop:before method="beforePerform" pointcut-ref="pointcut"/>-->
            <!--<aop:after method="afterPerform" pointcut-ref="pointcut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->


    <bean id="fooService" class="com.liko.spring.transaction.DefaultFooService"/>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
    <aop:config>
        <!--有接口jdk-->
        <!--<aop:pointcut id="fooServiceOperation" expression="execution(* com.liko.spring.transaction.FooService.*(..))"/>-->

        <!--无接口cglib-->
        <!--<aop:pointcut id="fooServiceOperation" expression="execution(* com.liko.spring.transaction.DefaultFooService.*(..))"/>-->

        <aop:pointcut id="fooServiceOperation" expression="execution(* com.liko.spring.transaction.DefaultFooService.insertFoo(..))"/>

        <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
    </aop:config>

    <!-- don't forget the DataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/latipay"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>

    <!-- similarly, don't forget the PlatformTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>